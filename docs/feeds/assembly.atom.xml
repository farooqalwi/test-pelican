<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Test Pelican - Assembly</title><link href="https://farooqalwi.github.io/test-pelican/" rel="alternate"></link><link href="https://farooqalwi.github.io/test-pelican/feeds/assembly.atom.xml" rel="self"></link><id>https://farooqalwi.github.io/test-pelican/</id><updated>2021-04-23T15:07:00+05:00</updated><entry><title>Assembly Language 3</title><link href="https://farooqalwi.github.io/test-pelican/assembly-language-3.html" rel="alternate"></link><published>2021-04-23T15:07:00+05:00</published><updated>2021-04-23T15:07:00+05:00</updated><author><name>Alwi</name></author><id>tag:farooqalwi.github.io,2021-04-23:/test-pelican/assembly-language-3.html</id><summary type="html">&lt;h2&gt;Objective: Write a program to display the digits in decimal from 0-7 in to 7-&lt;/h2&gt;
&lt;h2&gt;ource Code:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mov  al,80h          =&amp;gt;make  all  port
out  1f,al           =&amp;gt;out  80h  to  port
mov  al,00h          =&amp;gt;mov  0
out  19h,al          =&amp;gt;mov  0  to  port int  3
mov  al,f9h          =&amp;gt;mov  1
out …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Objective: Write a program to display the digits in decimal from 0-7 in to 7-&lt;/h2&gt;
&lt;h2&gt;ource Code:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mov  al,80h          =&amp;gt;make  all  port
out  1f,al           =&amp;gt;out  80h  to  port
mov  al,00h          =&amp;gt;mov  0
out  19h,al          =&amp;gt;mov  0  to  port int  3
mov  al,f9h          =&amp;gt;mov  1
out  19h,al          =&amp;gt;mov  1  to  port int  3
mov  al,a4h          =&amp;gt;mov  2
out  19h,al          =&amp;gt;mov  2  to  port int  3
mov  al,b0h          =&amp;gt;mov  3
out  19h,al          =&amp;gt;mov  3  to  port int  3
............(so  on  to  9)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Output:&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Assembly Language 3" src="images/AL-3.1.JPG" title="AL-3 output"&gt;&lt;/p&gt;</content><category term="Assembly"></category></entry><entry><title>Assembly Language 2</title><link href="https://farooqalwi.github.io/test-pelican/assembly-language-2.html" rel="alternate"></link><published>2021-04-23T15:02:00+05:00</published><updated>2021-04-23T15:02:00+05:00</updated><author><name>Alwi</name></author><id>tag:farooqalwi.github.io,2021-04-23:/test-pelican/assembly-language-2.html</id><summary type="html">&lt;h2&gt;Objective: Write a program to print a string. (i.e. ALWI)&lt;/h2&gt;
&lt;h2&gt;ource Code:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.model&lt;/span&gt;          &lt;span class="c1"&gt;// It is an assembler directive that specifies the size of the program&lt;/span&gt;
&lt;span class="na"&gt;.stack&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// It declares size of stack&lt;/span&gt;
&lt;span class="na"&gt;.data&lt;/span&gt;           &lt;span class="c1"&gt;// In this segment variables are declared&lt;/span&gt;
&lt;span class="na"&gt;.code&lt;/span&gt;           &lt;span class="c1"&gt;// It is code segment directive &lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="no"&gt;proc&lt;/span&gt;       &lt;span class="c1"&gt;// main …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Objective: Write a program to print a string. (i.e. ALWI)&lt;/h2&gt;
&lt;h2&gt;ource Code:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.model&lt;/span&gt;          &lt;span class="c1"&gt;// It is an assembler directive that specifies the size of the program&lt;/span&gt;
&lt;span class="na"&gt;.stack&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// It declares size of stack&lt;/span&gt;
&lt;span class="na"&gt;.data&lt;/span&gt;           &lt;span class="c1"&gt;// In this segment variables are declared&lt;/span&gt;
&lt;span class="na"&gt;.code&lt;/span&gt;           &lt;span class="c1"&gt;// It is code segment directive &lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="no"&gt;proc&lt;/span&gt;       &lt;span class="c1"&gt;// main procedures start from here&lt;/span&gt;

&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;DL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="no"&gt;A&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;// &amp;#39;A&amp;#39; is moving to Data Register&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// Service Routine is being defined here to print the character to AH&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;         &lt;span class="c1"&gt;// Programs are returned to windows from DOS&lt;/span&gt;

&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;DL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="no"&gt;L&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;// &amp;#39;L&amp;#39; is moving to Data Register&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// Service Routine is being defined here to print the character to AH&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;         &lt;span class="c1"&gt;// Programs are returned to windows from DOS&lt;/span&gt;

&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;DL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="no"&gt;W&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;// &amp;#39;W&amp;#39; is moving to Data Register&amp;gt;&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// Service Routine is being defined here to print the character to AH&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;         &lt;span class="c1"&gt;// Programs are returned to windows from DOS&lt;/span&gt;

&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;DL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="no"&gt;I&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;// &amp;#39;I&amp;#39; is moving to Data Register&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// Service Routine is being defined here to print the character to AH&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// Programs are returned to windows from DOS&lt;/span&gt;

&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="no"&gt;ch&lt;/span&gt;     &lt;span class="c1"&gt;// Using 4ch service routine number to display&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;         &lt;span class="c1"&gt;// Programs are returned to windows from DOS&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="no"&gt;endp&lt;/span&gt;       &lt;span class="c1"&gt;// Main procedures end here&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt; &lt;span class="no"&gt;main&lt;/span&gt;        &lt;span class="c1"&gt;// whole programs end here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Output:&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Assembly Language 2" src="images/AL-2.1.JPG" title="AL-2 output"&gt;
&lt;img alt="Assembly Language 2" src="images/AL-2.2.JPG" title="AL-2 output"&gt;
&lt;img alt="Assembly Language 2" src="images/AL-2.3.JPG" title="AL-2 output"&gt;&lt;/p&gt;</content><category term="Assembly"></category></entry><entry><title>Assembly Language 1</title><link href="https://farooqalwi.github.io/test-pelican/assembly-language-1.html" rel="alternate"></link><published>2021-04-23T14:50:00+05:00</published><updated>2021-04-23T14:50:00+05:00</updated><author><name>Alwi</name></author><id>tag:farooqalwi.github.io,2021-04-23:/test-pelican/assembly-language-1.html</id><summary type="html">&lt;h2&gt;Objective: Write a program to print a single character ‘A’.&lt;/h2&gt;
&lt;h2&gt;ource Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.model&lt;/span&gt;          &lt;span class="c1"&gt;// It is an assembler directive that specifies the size of the program&lt;/span&gt;
&lt;span class="na"&gt;.stack&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// It declares size of stack&lt;/span&gt;
&lt;span class="na"&gt;.data&lt;/span&gt;           &lt;span class="c1"&gt;// In this segment variables are declared &lt;/span&gt;
&lt;span class="na"&gt;.code&lt;/span&gt;           &lt;span class="c1"&gt;// It is code segment directive&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="no"&gt;proc&lt;/span&gt;       &lt;span class="c1"&gt;// main procedures …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Objective: Write a program to print a single character ‘A’.&lt;/h2&gt;
&lt;h2&gt;ource Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;.model&lt;/span&gt;          &lt;span class="c1"&gt;// It is an assembler directive that specifies the size of the program&lt;/span&gt;
&lt;span class="na"&gt;.stack&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// It declares size of stack&lt;/span&gt;
&lt;span class="na"&gt;.data&lt;/span&gt;           &lt;span class="c1"&gt;// In this segment variables are declared &lt;/span&gt;
&lt;span class="na"&gt;.code&lt;/span&gt;           &lt;span class="c1"&gt;// It is code segment directive&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="no"&gt;proc&lt;/span&gt;       &lt;span class="c1"&gt;// main procedures start from here&lt;/span&gt;

&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;DL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="no"&gt;A&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;     &lt;span class="c1"&gt;// ‘A’ is moving to Data Register&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;     &lt;span class="c1"&gt;// Service Routine is being defined here to print the character&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;         &lt;span class="c1"&gt;// Programs are returned to windows from DOS&lt;/span&gt;
&lt;span class="nf"&gt;mov&lt;/span&gt; &lt;span class="no"&gt;ah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="no"&gt;ch&lt;/span&gt;     &lt;span class="c1"&gt;// Using 4ch service routine number to display&lt;/span&gt;
&lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="no"&gt;h&lt;/span&gt;         &lt;span class="c1"&gt;// Programs are returned to windows from DOS&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="no"&gt;endp&lt;/span&gt;       &lt;span class="c1"&gt;// Main procedures end here&lt;/span&gt;
&lt;span class="nf"&gt;end&lt;/span&gt; &lt;span class="no"&gt;main&lt;/span&gt;        &lt;span class="c1"&gt;// whole programs end here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Output:&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Assembly Language 1" src="images/AL-1.1.JPG" title="AL-1 output"&gt;
&lt;img alt="Assembly Language 1" src="images/AL-1.2.JPG" title="AL-1 output"&gt;
&lt;img alt="Assembly Language 1" src="images/AL-1.3.JPG" title="AL-1 output"&gt;&lt;/p&gt;</content><category term="Assembly"></category></entry></feed>